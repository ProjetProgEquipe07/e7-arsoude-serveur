// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using arsoudServeur.Data;

#nullable disable

namespace arsoudeServeur.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240213194716_IN182")]
    partial class IN182
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dda35078-d6c7-42e4-a026-b2fd855a92ec",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "7223cd62-c9c8-4778-86bc-7b340ea07174",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ec94ed3-9047-41f0-a876-8433ce3c9009",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP3Qt62UPHd/j2o81Rth6iEIfbjWhBKiVliAVHqIwNNNRouCXdk1ih8phxV4dfIG5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "637f2a79-d612-44d2-a80b-fc684029e7af",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111112",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "213552df-a8af-405f-9bb3-b00669edc7db",
                            Email = "user1@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@HOTMAIL.COM",
                            NormalizedUserName = "USER1@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFYMXQ5SdivbaZYYREQheynRZjNIVFlMIWX4f4JbONcIhmceMdqroMWH90Jr4PBbNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d47f3c6-f509-4e9f-adbe-bbcbe55a64e4",
                            TwoFactorEnabled = false,
                            UserName = "user1@hotmail.com"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111113",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3242350-3405-49e5-877a-2bbd79ae6cfa",
                            Email = "user2@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@HOTMAIL.COM",
                            NormalizedUserName = "USER2@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOQlHF+g2n/rnrVxkknbWL29PvKwK0oocbwEP0eNPzmQ9/UvoCT/R1ZhdGiyVwUWpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fabdcf35-27b3-4829-84de-4fbdfa3560a5",
                            TwoFactorEnabled = false,
                            UserName = "user2@hotmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("arsoudeServeur.Models.Avertissement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateSuppresion")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("randonneeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("typeAvertissement")
                        .HasColumnType("INTEGER");

                    b.Property<double>("x")
                        .HasColumnType("REAL");

                    b.Property<double>("y")
                        .HasColumnType("REAL");

                    b.HasKey("id");

                    b.HasIndex("randonneeId");

                    b.ToTable("avertissements");
                });

            modelBuilder.Entity("arsoudeServeur.Models.Commentaire", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RandonneeAnglaisid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("randonneeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("review")
                        .HasColumnType("INTEGER");

                    b.Property<string>("texte")
                        .HasColumnType("TEXT");

                    b.Property<int>("utilisateurId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("RandonneeAnglaisid");

                    b.HasIndex("randonneeId");

                    b.HasIndex("utilisateurId");

                    b.ToTable("commentaires");
                });

            modelBuilder.Entity("arsoudeServeur.Models.GPS", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RandonneeAnglaisid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RandonneeUtilisateurTraceid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("arrivee")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("depart")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("randonneAnglaisId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("randonneeId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("x")
                        .HasColumnType("REAL");

                    b.Property<double>("y")
                        .HasColumnType("REAL");

                    b.HasKey("id");

                    b.HasIndex("RandonneeAnglaisid");

                    b.HasIndex("RandonneeUtilisateurTraceid");

                    b.HasIndex("randonneeId");

                    b.ToTable("gps");

                    b.HasData(
                        new
                        {
                            id = 1,
                            arrivee = false,
                            depart = true,
                            randonneAnglaisId = 1,
                            randonneeId = 1,
                            x = 45.536653134864743,
                            y = -73.494974340959118
                        },
                        new
                        {
                            id = 2,
                            arrivee = true,
                            depart = false,
                            randonneAnglaisId = 1,
                            randonneeId = 1,
                            x = 45.636653134864737,
                            y = -73.594974340959126
                        },
                        new
                        {
                            id = 3,
                            arrivee = false,
                            depart = true,
                            randonneAnglaisId = 2,
                            randonneeId = 2,
                            x = 45.354998999999999,
                            y = -73.150238000000002
                        },
                        new
                        {
                            id = 4,
                            arrivee = true,
                            depart = false,
                            randonneAnglaisId = 2,
                            randonneeId = 2,
                            x = 45.356924999999997,
                            y = -73.150233999999998
                        },
                        new
                        {
                            id = 5,
                            arrivee = false,
                            depart = true,
                            randonneAnglaisId = 3,
                            randonneeId = 3,
                            x = 45.538015000000001,
                            y = -73.156982999999997
                        },
                        new
                        {
                            id = 6,
                            arrivee = true,
                            depart = false,
                            randonneAnglaisId = 3,
                            randonneeId = 3,
                            x = 45.636653134864737,
                            y = -73.594974340959126
                        },
                        new
                        {
                            id = 7,
                            arrivee = false,
                            depart = true,
                            randonneAnglaisId = 4,
                            randonneeId = 4,
                            x = 45.354998999999999,
                            y = -73.150238000000002
                        },
                        new
                        {
                            id = 8,
                            arrivee = true,
                            depart = false,
                            randonneAnglaisId = 4,
                            randonneeId = 4,
                            x = 45.356924999999997,
                            y = -73.150233999999998
                        },
                        new
                        {
                            id = 9,
                            arrivee = false,
                            depart = true,
                            randonneAnglaisId = 5,
                            randonneeId = 5,
                            x = 45.354998999999999,
                            y = -73.150238000000002
                        },
                        new
                        {
                            id = 10,
                            arrivee = true,
                            depart = false,
                            randonneAnglaisId = 5,
                            randonneeId = 5,
                            x = 45.356924999999997,
                            y = -73.150233999999998
                        },
                        new
                        {
                            id = 11,
                            arrivee = false,
                            depart = true,
                            randonneAnglaisId = 6,
                            randonneeId = 6,
                            x = 45.354998999999999,
                            y = -73.160238000000007
                        },
                        new
                        {
                            id = 12,
                            arrivee = true,
                            depart = false,
                            randonneAnglaisId = 6,
                            randonneeId = 6,
                            x = 45.356924999999997,
                            y = -73.150233999999998
                        });
                });

            modelBuilder.Entity("arsoudeServeur.Models.Image", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("lien")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("randonneeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("randonneeId")
                        .IsUnique();

                    b.ToTable("images");
                });

            modelBuilder.Entity("arsoudeServeur.Models.Randonnee", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("emplacement")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("etatRandonnee")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<int>("typeRandonnee")
                        .HasColumnType("INTEGER");

                    b.Property<int>("utilisateurId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("utilisateurId");

                    b.ToTable("randonnees");

                    b.HasData(
                        new
                        {
                            id = 1,
                            description = "promenade cool a st-brun",
                            emplacement = "st-bruno",
                            etatRandonnee = 0,
                            nom = "St-Brun",
                            typeRandonnee = 1,
                            utilisateurId = 1
                        },
                        new
                        {
                            id = 2,
                            description = "promenade moyennement cool la bas",
                            emplacement = "dehors",
                            etatRandonnee = 0,
                            nom = "ptite marche au subway",
                            typeRandonnee = 0,
                            utilisateurId = 2
                        },
                        new
                        {
                            id = 3,
                            description = "promenade fresh a bro s s a r d",
                            emplacement = "st-hilaire?",
                            etatRandonnee = 0,
                            nom = "Brossard",
                            typeRandonnee = 1,
                            utilisateurId = 3
                        },
                        new
                        {
                            id = 4,
                            description = "promenade au subway",
                            emplacement = "st-grégoire",
                            etatRandonnee = 0,
                            nom = "ma randonnée pédestre",
                            typeRandonnee = 0,
                            utilisateurId = 2
                        },
                        new
                        {
                            id = 5,
                            description = "ça doit être cool la bas",
                            emplacement = "quelque part",
                            etatRandonnee = 0,
                            nom = "rivière rouge",
                            typeRandonnee = 0,
                            utilisateurId = 2
                        },
                        new
                        {
                            id = 6,
                            description = "je pense qu'on a beaucoup de fun",
                            emplacement = "mont tremblant",
                            etatRandonnee = 0,
                            nom = "Ma randonnée",
                            typeRandonnee = 0,
                            utilisateurId = 1
                        });
                });

            modelBuilder.Entity("arsoudeServeur.Models.RandonneeAnglais", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("emplacement")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("etatRandonnee")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("randonneeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("typeRandonnee")
                        .HasColumnType("INTEGER");

                    b.Property<int>("utilisateurId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("randonneeId");

                    b.HasIndex("utilisateurId");

                    b.ToTable("randonneeAnglais");

                    b.HasData(
                        new
                        {
                            id = 1,
                            description = "Cool walk in St-Bruno",
                            emplacement = "St-Bruno",
                            etatRandonnee = 0,
                            nom = "St-Bruno",
                            randonneeId = 1,
                            typeRandonnee = 1,
                            utilisateurId = 1
                        },
                        new
                        {
                            id = 2,
                            description = "Moderately cool walk there",
                            emplacement = "Outside",
                            etatRandonnee = 0,
                            nom = "Little Walk to Subway",
                            randonneeId = 2,
                            typeRandonnee = 0,
                            utilisateurId = 2
                        },
                        new
                        {
                            id = 3,
                            description = "Fresh walk in St-Hilaire",
                            emplacement = "St-Hilaire",
                            etatRandonnee = 0,
                            nom = "St-Hilaire",
                            randonneeId = 3,
                            typeRandonnee = 1,
                            utilisateurId = 3
                        },
                        new
                        {
                            id = 4,
                            description = "Walk to Subway",
                            emplacement = "St-Grégoire",
                            etatRandonnee = 0,
                            nom = "My Hiking Trip",
                            randonneeId = 4,
                            typeRandonnee = 0,
                            utilisateurId = 2
                        },
                        new
                        {
                            id = 5,
                            description = "It must be cool there",
                            emplacement = "Somewhere",
                            etatRandonnee = 0,
                            nom = "Red River",
                            randonneeId = 5,
                            typeRandonnee = 0,
                            utilisateurId = 2
                        },
                        new
                        {
                            id = 6,
                            description = "I think it's a lot of fun",
                            emplacement = "Mont Tremblant",
                            etatRandonnee = 0,
                            nom = "My Trek",
                            randonneeId = 6,
                            typeRandonnee = 0,
                            utilisateurId = 1
                        });
                });

            modelBuilder.Entity("arsoudeServeur.Models.RandonneeUtilisateur", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("randonneeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("utilisateurId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("randonneeId");

                    b.HasIndex("utilisateurId");

                    b.ToTable("RandonneeUtilisateur");
                });

            modelBuilder.Entity("arsoudeServeur.Models.RandonneeUtilisateurTrace", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("randonneeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("utilisateurId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("randonneeId");

                    b.HasIndex("utilisateurId");

                    b.ToTable("utilisateursTrace");
                });

            modelBuilder.Entity("arsoudeServeur.Models.Utilisateur", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("adresse")
                        .HasColumnType("TEXT");

                    b.Property<int>("anneeDeNaissance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("codePostal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("courriel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("identityUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("moisDeNaissance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("identityUserId");

                    b.ToTable("utilisateurs");

                    b.HasData(
                        new
                        {
                            id = 1,
                            adresse = "",
                            anneeDeNaissance = 0,
                            codePostal = "E3A 4R4",
                            courriel = "admin@gmail.com",
                            identityUserId = "11111111-1111-1111-1111-111111111111",
                            moisDeNaissance = 0,
                            nom = "tangerine",
                            prenom = "robert",
                            role = "Administrator"
                        },
                        new
                        {
                            id = 2,
                            adresse = "",
                            anneeDeNaissance = 0,
                            codePostal = "E3A 4R4",
                            courriel = "user1@hotmail.com",
                            identityUserId = "11111111-1111-1111-1111-111111111112",
                            moisDeNaissance = 0,
                            nom = "Hogan",
                            prenom = "Hulk",
                            role = "User"
                        },
                        new
                        {
                            id = 3,
                            adresse = "1260, rue Mill, suite 100",
                            anneeDeNaissance = 0,
                            codePostal = "E3A 4R4",
                            courriel = "user2@hotmail.com",
                            identityUserId = "11111111-1111-1111-1111-111111111113",
                            moisDeNaissance = 0,
                            nom = "Charles",
                            prenom = "Grégory",
                            role = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("arsoudeServeur.Models.Avertissement", b =>
                {
                    b.HasOne("arsoudeServeur.Models.Randonnee", "randonnee")
                        .WithMany()
                        .HasForeignKey("randonneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("randonnee");
                });

            modelBuilder.Entity("arsoudeServeur.Models.Commentaire", b =>
                {
                    b.HasOne("arsoudeServeur.Models.RandonneeAnglais", null)
                        .WithMany("commentaires")
                        .HasForeignKey("RandonneeAnglaisid");

                    b.HasOne("arsoudeServeur.Models.Randonnee", "randonnee")
                        .WithMany("commentaires")
                        .HasForeignKey("randonneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("arsoudeServeur.Models.Utilisateur", "utilisateur")
                        .WithMany()
                        .HasForeignKey("utilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("randonnee");

                    b.Navigation("utilisateur");
                });

            modelBuilder.Entity("arsoudeServeur.Models.GPS", b =>
                {
                    b.HasOne("arsoudeServeur.Models.RandonneeAnglais", null)
                        .WithMany("GPS")
                        .HasForeignKey("RandonneeAnglaisid");

                    b.HasOne("arsoudeServeur.Models.RandonneeUtilisateurTrace", null)
                        .WithMany("gpsListe")
                        .HasForeignKey("RandonneeUtilisateurTraceid");

                    b.HasOne("arsoudeServeur.Models.Randonnee", "randonnee")
                        .WithMany("GPS")
                        .HasForeignKey("randonneeId");

                    b.Navigation("randonnee");
                });

            modelBuilder.Entity("arsoudeServeur.Models.Image", b =>
                {
                    b.HasOne("arsoudeServeur.Models.Randonnee", "randonnee")
                        .WithOne("image")
                        .HasForeignKey("arsoudeServeur.Models.Image", "randonneeId");

                    b.Navigation("randonnee");
                });

            modelBuilder.Entity("arsoudeServeur.Models.Randonnee", b =>
                {
                    b.HasOne("arsoudeServeur.Models.Utilisateur", "utilisateur")
                        .WithMany()
                        .HasForeignKey("utilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("utilisateur");
                });

            modelBuilder.Entity("arsoudeServeur.Models.RandonneeAnglais", b =>
                {
                    b.HasOne("arsoudeServeur.Models.Randonnee", "randonnee")
                        .WithMany()
                        .HasForeignKey("randonneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("arsoudeServeur.Models.Utilisateur", "utilisateur")
                        .WithMany()
                        .HasForeignKey("utilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("randonnee");

                    b.Navigation("utilisateur");
                });

            modelBuilder.Entity("arsoudeServeur.Models.RandonneeUtilisateur", b =>
                {
                    b.HasOne("arsoudeServeur.Models.Randonnee", "randonnee")
                        .WithMany()
                        .HasForeignKey("randonneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("arsoudeServeur.Models.Utilisateur", "utilisateur")
                        .WithMany("favoris")
                        .HasForeignKey("utilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("randonnee");

                    b.Navigation("utilisateur");
                });

            modelBuilder.Entity("arsoudeServeur.Models.RandonneeUtilisateurTrace", b =>
                {
                    b.HasOne("arsoudeServeur.Models.Randonnee", "randonnee")
                        .WithMany()
                        .HasForeignKey("randonneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("arsoudeServeur.Models.Utilisateur", "utilisateur")
                        .WithMany("traces")
                        .HasForeignKey("utilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("randonnee");

                    b.Navigation("utilisateur");
                });

            modelBuilder.Entity("arsoudeServeur.Models.Utilisateur", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "identityUser")
                        .WithMany()
                        .HasForeignKey("identityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("identityUser");
                });

            modelBuilder.Entity("arsoudeServeur.Models.Randonnee", b =>
                {
                    b.Navigation("GPS");

                    b.Navigation("commentaires");

                    b.Navigation("image")
                        .IsRequired();
                });

            modelBuilder.Entity("arsoudeServeur.Models.RandonneeAnglais", b =>
                {
                    b.Navigation("GPS");

                    b.Navigation("commentaires");
                });

            modelBuilder.Entity("arsoudeServeur.Models.RandonneeUtilisateurTrace", b =>
                {
                    b.Navigation("gpsListe");
                });

            modelBuilder.Entity("arsoudeServeur.Models.Utilisateur", b =>
                {
                    b.Navigation("favoris");

                    b.Navigation("traces");
                });
#pragma warning restore 612, 618
        }
    }
}
